"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const dbconn_1 = require("../db/dbconn");
const express_2 = __importDefault(require("express"));
exports.router = (0, express_1.Router)();
// Middleware
exports.router.use(express_2.default.json());
exports.router.use(express_2.default.urlencoded({ extended: true }));
exports.router.get("/wallet", (req, res) => {
    res.send("hello wallet");
});
/** ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô */
exports.router.post("/wallet/topup", async (req, res) => {
    const { userId, amount } = req.body;
    if (!userId || !amount || amount <= 0)
        return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    try {
        // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô user_account
        await dbconn_1.db.query("UPDATE user_account SET wallet_balance = wallet_balance + ? WHERE id = ?", [amount, userId]);
        // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
        await dbconn_1.db.query("INSERT INTO wallet_transactions (user_id, type, amount) VALUES (?, '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô', ?)", [userId, amount]);
        // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const [rows] = await dbconn_1.db
            .query("SELECT id, username, wallet_balance, profile_image_url FROM user_account WHERE id = ?", [userId]);
        res.json({
            success: true,
            message: "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            user: rows[0],
        });
    }
    catch (err) {
        console.error("‚ùå ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
/** ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° */
exports.router.get("/wallet/history/:userId", async (req, res) => {
    const { userId } = req.params;
    try {
        const [rows] = await dbconn_1.db
            .query("SELECT type, amount, created_at FROM wallet_transactions WHERE user_id = ? ORDER BY created_at DESC", [userId]);
        res.json({ success: true, transactions: rows });
    }
    catch (err) {
        console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
exports.router.post("/wallet/buy-game", async (req, res) => {
    const { userId, gameId } = req.body;
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const [userRows] = await dbconn_1.db.query("SELECT wallet_balance FROM user_account WHERE id = ?", [userId]);
        if (!userRows.length)
            return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        const [gameRows] = await dbconn_1.db.query("SELECT price FROM game WHERE id = ?", [gameId]);
        if (!gameRows.length)
            return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Å‡∏°" });
        const price = parseFloat(gameRows[0].price);
        const balance = parseFloat(userRows[0].wallet_balance);
        if (balance < price)
            return res.json({ success: false, message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠" });
        // ‚úÖ ‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô user_account
        await dbconn_1.db.query("UPDATE user_account SET wallet_balance = wallet_balance - ? WHERE id = ?", [price, userId]);
        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
        await dbconn_1.db.query("INSERT INTO wallet_transactions (user_id, type, amount) VALUES (?, '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°', ?)", [userId, price]);
        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        await dbconn_1.db.query("INSERT INTO purchase (user_id, total_amount, final_amount) VALUES (?, ?, ?)", [userId, price, price]);
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏Å‡∏•‡∏±‡∏ö
        const [updatedUserRows] = await dbconn_1.db.query("SELECT * FROM user_account WHERE id = ?", [userId]);
        res.json({ success: true, user: updatedUserRows[0] });
    }
    catch (err) {
        console.error("‚ùå ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
//# sourceMappingURL=wallet.js.map