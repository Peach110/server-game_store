"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const dbconn_1 = require("../db/dbconn");
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const express_2 = __importDefault(require("express"));
exports.router = (0, express_1.Router)();
exports.router.use(express_2.default.json());
exports.router.use(express_2.default.urlencoded({ extended: true }));
// ============================
// üìÇ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
// ============================
const uploadPath = path_1.default.join(__dirname, "../uploads");
if (!fs_1.default.existsSync(uploadPath)) {
    fs_1.default.mkdirSync(uploadPath, { recursive: true });
}
const storage = multer_1.default.diskStorage({
    destination: (_req, _file, cb) => {
        cb(null, uploadPath);
    },
    filename: (_req, file, cb) => {
        const uniqueName = Date.now() + path_1.default.extname(file.originalname);
        cb(null, uniqueName);
    },
});
const upload = (0, multer_1.default)({ storage });
// ===================================================
// üü¢ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
// ===================================================
// Route ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
exports.router.post("/addgame", upload.fields([
    { name: "cover_image", maxCount: 1 },
    { name: "images", maxCount: 5 }
]), async (req, res) => {
    const { title, price, category_id, description } = req.body;
    if (!title || !category_id || !req.files) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
    try {
        const files = req.files;
        // ‡∏î‡∏∂‡∏á cover image
        const coverFile = files.cover_image?.[0];
        if (!coverFile) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å" });
        }
        const cover_image_url = coverFile.filename.trim();
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        const [result] = await dbconn_1.db.query("INSERT INTO game (title, price, category_id, description, cover_image_url) VALUES (?, ?, ?, ?, ?)", [title.trim(), price, category_id, description?.trim(), cover_image_url]);
        const gameId = result.insertId;
        // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        const imagesFiles = files.images || [];
        const images = imagesFiles.map(f => f.filename.trim());
        for (const img of images) {
            await dbconn_1.db.query("INSERT INTO game_image (game_id, image_url) VALUES (?, ?)", [gameId, img]);
        }
        // ‡∏™‡πà‡∏á path ‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏´‡πâ frontend
        const fullPaths = images.map(img => `/uploads/${img}`);
        res.json({
            message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            gameId,
            cover_image_url: `/uploads/${cover_image_url}`,
            images: fullPaths
        });
    }
    catch (err) {
        console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
// ===================================================
// üü° 2. ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏´‡∏ô‡πâ‡∏≤ Admin)
// ===================================================
exports.router.get("/allgames", async (_req, res) => {
    try {
        const [games] = await dbconn_1.db.query(`
      SELECT 
        g.id,
        g.title,
        g.price,
        g.category_id,
        c.name AS category_name,
        g.description,
        g.release_date,
        g.cover_image_url,
        g.sold_count
      FROM game g
      JOIN category c ON g.category_id = c.id
      ORDER BY g.sold_count DESC, g.release_date DESC
    `);
        const [images] = await dbconn_1.db.query("SELECT * FROM game_image");
        const result = games.map((g) => {
            const gameImages = images
                .filter((img) => img.game_id === g.id)
                .map((img) => `/uploads/${img.image_url.trim()}`);
            const coverPath = g.cover_image_url
                ? `/uploads/${path_1.default.basename(g.cover_image_url.trim())}`
                : gameImages.length > 0
                    ? gameImages[0]
                    : null;
            return {
                id: g.id,
                name: g.title.trim(),
                price: g.price,
                category: g.category_name, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                description: g.description?.trim(),
                releaseDate: g.release_date,
                sold_count: g.sold_count, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                cover_image_url: coverPath,
                images: gameImages,
            };
        });
        res.json(result);
    }
    catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
// ===================================================
// üü£ 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
// ===================================================
exports.router.put("/editgame/:id", upload.array("images", 5), async (req, res) => {
    const { id } = req.params;
    const { name, price, category, description, cover_image_url } = req.body;
    const files = req.files;
    try {
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏° (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
        await dbconn_1.db.query("UPDATE game SET title=?, price=?, category_id=?, description=? WHERE id=?", [name?.trim(), price, category, description?.trim(), id]);
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
        if (files && files.length > 0) {
            // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏•‡∏ö
            const [oldImages] = await dbconn_1.db.query("SELECT image_url FROM game_image WHERE game_id=?", [id]);
            // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /uploads
            oldImages.forEach((img) => {
                const imgPath = path_1.default.join(__dirname, "../uploads", img.image_url);
                if (fs_1.default.existsSync(imgPath))
                    fs_1.default.unlinkSync(imgPath);
            });
            // ‡∏•‡∏ö record ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å DB
            await dbconn_1.db.query("DELETE FROM game_image WHERE game_id=?", [id]);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô DB
            const newImages = files.map(f => f.filename.trim());
            for (const img of newImages) {
                await dbconn_1.db.query("INSERT INTO game_image (game_id, image_url) VALUES (?, ?)", [id, img]);
            }
        }
        res.json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏≤‡∏ß‡∏£‡πÅ‡∏•‡πâ‡∏ß" });
    }
    catch (err) {
        console.error("‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
// üî¥ 4. ‡∏•‡∏ö‡πÄ‡∏Å‡∏°
// ===================================================
exports.router.delete("/deletegame/:id", async (req, res) => {
    const { id } = req.params;
    try {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏ô user_library ‡∏Å‡πà‡∏≠‡∏ô
        await dbconn_1.db.query("DELETE FROM user_library WHERE game_id=?", [id]);
        await dbconn_1.db.query("DELETE FROM game_image WHERE game_id=?", [id]);
        await dbconn_1.db.query("DELETE FROM game WHERE id=?", [id]);
        res.json({ message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
    catch (err) {
        console.error("‚ùå ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
// üîπ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.router.get("/users", async (_req, res) => {
    try {
        const [users] = await dbconn_1.db.query(`SELECT id, username AS name, email FROM user_account ORDER BY id`);
        res.json({ success: true, users });
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
    }
});
// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô + ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°)
exports.router.get("/user/:id/transactions", async (req, res) => {
    const userId = parseInt(req.params.id);
    if (!userId)
        return res.status(400).json({ success: false, message: "user_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    try {
        // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
        const [users] = await dbconn_1.db.query(`SELECT id, username AS name, email, wallet_balance 
       FROM user_account WHERE id = ?`, [userId]);
        if (users.length === 0) {
            return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }
        const user = users[0];
        // ‚úÖ 1. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
        const [walletTransactions] = await dbconn_1.db.query(`SELECT id, '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô' AS type, amount, created_at AS date
       FROM wallet_transactions 
       WHERE user_id = ?`, [userId]);
        // ‚úÖ 2. ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å purchase + game
        const [gamePurchases] = await dbconn_1.db.query(`SELECT ul.id, '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°' AS type, g.price AS amount, p.created_at AS date, g.title AS game_name
   FROM user_library ul
   JOIN game g ON ul.game_id = g.id
   JOIN purchase p ON p.user_id = ul.user_id
   WHERE ul.user_id = ?`, [userId]);
        // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö
        const transactions = [
            ...walletTransactions,
            ...gamePurchases
        ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
        res.json({ success: true, user: { ...user, transactions } });
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
    }
});
/** ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */
exports.router.get("/allcodes", async (req, res) => {
    try {
        const [rows] = await dbconn_1.db.query("SELECT * FROM Discount_code ORDER BY id DESC");
        res.json(rows);
    }
    catch (err) {
        console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});
/** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà */
exports.router.post("/addcodes", async (req, res) => {
    const { code_id, price, max_use, discount_persen } = req.body;
    if (!code_id || !max_use)
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å code_id ‡πÅ‡∏•‡∏∞ max_use ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    try {
        const [result] = await dbconn_1.db.query(`INSERT INTO Discount_code (code_id, price, max_use, use_code, discount_persen) VALUES (?, ?, ?, ?, ?)`, [code_id.trim(), price || 0, max_use, 0, discount_persen || 0]);
        res.json({ message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", id: result.insertId });
    }
    catch (err) {
        console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
/** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î */
exports.router.put("/editcode/:id", async (req, res) => {
    const { id } = req.params;
    const { code_id, price, max_use, discount_persen } = req.body;
    if (!code_id || !max_use)
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    try {
        await dbconn_1.db.query("UPDATE Discount_code SET code_id=?, price=?, max_use=?, discount_persen=? WHERE id=?", [code_id.trim(), price || 0, max_use, discount_persen || 0, id]);
        res.json({ message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
    catch (err) {
        console.error("‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
/** ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î */
exports.router.delete("/deletecode/:id", async (req, res) => {
    const { id } = req.params;
    try {
        await dbconn_1.db.query("DELETE FROM Discount_code WHERE id=?", [id]);
        res.json({ message: "üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
    catch (err) {
        console.error("‚ùå ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
//# sourceMappingURL=admin.js.map