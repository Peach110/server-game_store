"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = exports.router = void 0;
const express_1 = require("express");
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const path_1 = __importDefault(require("path"));
const multer_1 = __importDefault(require("multer"));
const express_2 = __importDefault(require("express"));
const dbconn_1 = require("../db/dbconn"); // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
exports.router = (0, express_1.Router)();
// ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î CORS ‡πÅ‡∏•‡∏∞ Middleware ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
exports.router.use(express_2.default.json());
exports.router.use(express_2.default.urlencoded({ extended: true }));
// ===================== STATIC FILE SERVING FIX =====================
// FIX: ‡πÉ‡∏ä‡πâ path.resolve('uploads') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Express ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á 
// ‡πÇ‡∏î‡∏¢ Multer ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏î
exports.router.use('/uploads', express_2.default.static(path_1.default.resolve('uploads')));
// ===================================================================
// ‡∏ï‡∏±‡πâ‡∏á folder ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå (Multer configuration)
const storage = multer_1.default.diskStorage({
    destination: function (_req, _file, cb) {
        // Multer ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå 'uploads/' ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö CWD (Current Working Directory)
        cb(null, 'uploads/');
    },
    filename: function (_req, file, cb) {
        const ext = path_1.default.extname(file.originalname);
        cb(null, `${Date.now()}${ext}`);
    }
});
exports.upload = (0, multer_1.default)({ storage });
// ================= SIGNUP =================
exports.router.post("/SignUp", exports.upload.single("profile_image"), async (req, res) => {
    const { username, email, password, role } = req.body;
    const file = req.file;
    if (!username || !email || !password) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    }
    try {
        // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÉ‡∏ä‡πâ pool ‡∏´‡∏£‡∏∑‡∏≠ db ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì import ‡∏°‡∏≤)
        const [existing] = await dbconn_1.db.query("SELECT id FROM user_account WHERE email = ? OR username = ?", [email, username]);
        if (existing.length > 0) {
            return res.status(400).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
        }
        // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const hash = await bcrypt_1.default.hash(password, 10);
        const imageUrl = file ? `/uploads/${file.filename}` : null;
        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
        const [result] = await dbconn_1.db.query(`INSERT INTO user_account (username, email, password_hash, profile_image_url, role, wallet_balance)
       VALUES (?, ?, ?, ?, ?, 0.00)`, [username, email, hash, imageUrl, role || "user"]);
        // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö frontend
        res.json({
            message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            user: {
                id: result.insertId,
                username,
                email,
                role: role || "user",
                wallet_balance: 0,
                profile_image_url: imageUrl,
            },
        });
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
exports.router.post("/Login", async (req, res) => {
    const { email, password, role } = req.body;
    if (!email || !password || !role) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ role" });
    }
    try {
        // ‡∏î‡∏∂‡∏á user ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å DB
        const [rows] = await dbconn_1.db.query("SELECT * FROM user_account WHERE email = ?", [email]);
        if (!rows.length) {
            return res.status(401).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }
        const user = rows[0];
        // ‡πÄ‡∏ä‡πá‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const match = await bcrypt_1.default.compare(password, user.password_hash);
        if (!match) {
            return res.status(401).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }
        // ‡πÄ‡∏ä‡πá‡∏Ñ role ‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (user.role !== role) {
            return res.status(403).json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ" });
        }
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
        const token = jsonwebtoken_1.default.sign({ id: user.id, username: user.username, role: user.role }, process.env.SECRET_KEY || "SECRET_KEY", { expiresIn: "2h" });
        res.json({
            message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                role: user.role,
                wallet_balance: user.wallet_balance,
                profile_image_url: user.profile_image_url,
            },
        });
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
// üîπ GET USERS - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.router.get("/users", async (_req, res) => {
    try {
        const [rows] = await dbconn_1.db.query("SELECT id, username, email, role, wallet_balance, created_at FROM user_account");
        res.json(rows);
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});
exports.router.post("/update-profile", exports.upload.single("profileImg"), async (req, res) => {
    try {
        const { userId, name } = req.body;
        // üî∏ Validation ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if (!userId)
            return res.status(400).json({ success: false, error: "Missing userId" });
        let profile_image_url = null;
        // üî∏ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        if (req.file) {
            profile_image_url = `/uploads/${req.file.filename}`;
        }
        // üî∏ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const updateQuery = profile_image_url
            ? "UPDATE user_account SET username=?, profile_image_url=? WHERE id=?"
            : "UPDATE user_account SET username=? WHERE id=?";
        const params = profile_image_url ? [name, profile_image_url, userId] : [name, userId];
        await dbconn_1.db.query(updateQuery, params);
        // üî∏ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        const [rows] = await dbconn_1.db.query("SELECT * FROM user_account WHERE id=?", [userId]);
        if (!rows.length) {
            return res.status(404).json({ success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }
        const user = rows[0];
        // üî∏ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        res.json({
            success: true,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                role: user.role,
                wallet_balance: user.wallet_balance,
                profile_image_url: user.profile_image_url,
            },
        });
    }
    catch (err) {
        console.error(err);
        res.status(500).json({ success: false, error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
});
//# sourceMappingURL=user.js.map