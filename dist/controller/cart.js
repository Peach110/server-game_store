"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const dbconn_1 = require("../db/dbconn");
exports.router = (0, express_1.Router)();
/**
 * ===========================
 * ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ===========================
 */
exports.router.get("/cart/:userId", async (req, res) => {
    const userId = parseInt(req.params.userId);
    if (!userId)
        return res.status(400).json({ success: false, message: "Missing userId" });
    try {
        const [rows] = await dbconn_1.db.query(`SELECT g.id, g.title, g.price, g.cover_image_url
       FROM cart c
       JOIN game g ON c.game_id = g.id
       WHERE c.user_id = ?`, [userId]);
        res.json({ success: true, cart: rows });
    }
    catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
        res.status(500).json({ success: false, message: "‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" });
    }
});
/**
 * ===========================
 * ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 * ===========================
 */
exports.router.post("/cart/add", async (req, res) => {
    const { userId, gameId } = req.body;
    if (!userId || !gameId)
        return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [check] = await dbconn_1.db.query("SELECT * FROM cart WHERE user_id = ? AND game_id = ?", [userId, gameId]);
        if (check.length > 0)
            return res.json({ success: false, message: "‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß" });
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        await dbconn_1.db.query("INSERT INTO cart (user_id, game_id) VALUES (?, ?)", [userId, gameId]);
        // ‡πÇ‡∏´‡∏•‡∏î cart ‡πÉ‡∏´‡∏°‡πà
        const [rows] = await dbconn_1.db.query(`SELECT g.id, g.title, g.price, g.cover_image_url
       FROM cart c
       JOIN game g ON c.game_id = g.id
       WHERE c.user_id = ?`, [userId]);
        res.json({ success: true, cart: rows });
    }
    catch (err) {
        console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
});
/**
 * ===========================
 * ‚úÖ ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 * ===========================
 */
exports.router.delete("/cart/remove/:gameId", async (req, res) => {
    const userId = parseInt(req.query.userId);
    const gameId = parseInt(req.params.gameId);
    if (!userId || !gameId)
        return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    try {
        await dbconn_1.db.query("DELETE FROM cart WHERE user_id = ? AND game_id = ?", [userId, gameId]);
        const [rows] = await dbconn_1.db.query(`SELECT g.id, g.title, g.price, g.cover_image_url
       FROM cart c
       JOIN game g ON c.game_id = g.id
       WHERE c.user_id = ?`, [userId]);
        res.json({ success: true, cart: rows });
    }
    catch (err) {
        console.error("‚ùå ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err);
        res.status(500).json({ success: false, message: "‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
});
/**
 * ===========================
 * ‚úÖ Checkout ‚Äî ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô + ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á + ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 * ===========================
 */
/** ‚úÖ Checkout */
// router.post("/cart/checkout", async (req: Request, res: Response) => {
//   const { userId, totalCost } = req.body;
//   if (!userId || totalCost === undefined)
//     return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
//   try {
//     // 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô wallet
//     const [user] = await db.query("SELECT wallet_balance FROM user_account WHERE id = ?", [userId]);
//     const balance = (user as any)[0]?.wallet_balance || 0;
//     if (balance < totalCost) {
//       return res.json({ success: false, message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô Wallet" });
//     }
//     // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
//     const [cartGames] = await db.query(
//       "SELECT game_id FROM cart WHERE user_id = ?",
//       [userId]
//     );
//     // 3Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á library
//     for (const g of cartGames as any[]) {
//       await db.query(
//         "INSERT INTO user_library (user_id, game_id) VALUES (?, ?)",
//         [userId, g.game_id]
//       );
//     }
//     // 4Ô∏è‚É£ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cart
//     await db.query("DELETE FROM cart WHERE user_id = ?", [userId]);
//     // 5Ô∏è‚É£ ‡∏ï‡∏±‡∏î‡πÄ‡∏á‡∏¥‡∏ô
//     const newBalance = balance - totalCost;
//     await db.query("UPDATE user_account SET wallet_balance = ? WHERE id = ?", [newBalance, userId]);
//     return res.json({
//       success: true,
//       message: "‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
//       newBalance
//     });
//   } catch (err) {
//     console.error("‚ùå Checkout Error:", err);
//     res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
//   }
// });
/** ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */
exports.router.get("/library/:userId", async (req, res) => {
    const { userId } = req.params;
    try {
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const [rows] = await dbconn_1.db.query(`
      SELECT g.id, g.title, g.price, g.category_id, g.cover_image_url, g.description
      FROM user_library ul
      JOIN game g ON ul.game_id = g.id
      WHERE ul.user_id = ?
    `, [userId]);
        const baseUrl = `${req.protocol}://${req.get('host')}`;
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏°
        const games = await Promise.all(rows.map(async (game) => {
            // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏à‡∏≤‡∏Å game_image
            const [images] = await dbconn_1.db.query(`SELECT image_url FROM game_image WHERE game_id = ?`, [game.id]);
            // map image list ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏°
            const imageList = images.map(img => {
                const path = img.image_url.includes("uploads/")
                    ? `${baseUrl}/${img.image_url.replace(/^\/+/, "")}`
                    : `${baseUrl}/uploads/${img.image_url.replace(/^\/+/, "")}`;
                return path;
            });
            // ‡∏õ‡∏£‡∏±‡∏ö cover image
            const cover = game.cover_image_url
                ? (game.cover_image_url.includes("uploads/")
                    ? `${baseUrl}/${game.cover_image_url.replace(/^\/+/, "")}`
                    : `${baseUrl}/uploads/${game.cover_image_url.replace(/^\/+/, "")}`)
                : imageList[0] || null;
            return {
                ...game,
                image: cover,
                images: imageList
            };
        }));
        res.json({ success: true, games });
    }
    catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ" });
    }
});
/** ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏° + wallet */
exports.router.get("/wallet/history/:userId", async (req, res) => {
    const { userId } = req.params;
    try {
        // ‡∏î‡∏∂‡∏á wallet transactions
        const [walletTx] = await dbconn_1.db.query("SELECT type, amount, created_at FROM wallet_transactions WHERE user_id = ? ORDER BY created_at DESC", [userId]);
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
        const [gameTx] = await dbconn_1.db.query(`SELECT g.title AS type, g.price AS amount, ul.purchased_at AS created_at
       FROM user_library ul
       JOIN game g ON ul.game_id = g.id
       WHERE ul.user_id = ?
       ORDER BY ul.purchased_at DESC`, [userId]);
        // ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const transactions = [...walletTx, ...gameTx].sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
        res.json({ success: true, transactions });
    }
    catch (err) {
        console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ" });
    }
});
exports.router.post("/cart/checkout", async (req, res) => {
    const { userId, totalCost, discountCode } = req.body;
    if (!userId || totalCost === undefined)
        return res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    const connection = await dbconn_1.db.getConnection();
    try {
        await connection.beginTransaction();
        // üîπ ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const [cartItems] = await connection.query("SELECT game_id FROM cart WHERE user_id = ?", [userId]);
        if (cartItems.length === 0)
            return res.json({ success: false, message: "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á" });
        // 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô wallet
        const [user] = await connection.query("SELECT wallet_balance FROM user_account WHERE id = ?", [userId]);
        const balance = user[0]?.wallet_balance || 0;
        if (balance < totalCost) {
            await connection.rollback();
            return res.json({ success: false, message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô Wallet" });
        }
        // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let discountData = null;
        if (discountCode) {
            const [codes] = await connection.query("SELECT * FROM Discount_code WHERE code_id = ?", [discountCode.trim()]);
            discountData = codes[0];
            if (!discountData) {
                await connection.rollback();
                return res.json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ô‡∏µ‡πâ" });
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            const [used] = await connection.query("SELECT * FROM user_used_code WHERE user_id = ? AND code_id = ?", [userId, discountData.id]);
            if (used.length > 0) {
                await connection.rollback();
                return res.json({ success: false, message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
            }
            if (discountData.use_code >= discountData.max_use) {
                await connection.rollback();
                return res.json({ success: false, message: "‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
            }
        }
        // 3Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• purchase
        const [purchaseResult] = await connection.query(`INSERT INTO purchase (user_id, total_amount, discount_code, final_amount)
       VALUES (?, ?, ?, ?)`, [userId, totalCost, discountCode || null, totalCost]);
        const purchaseId = purchaseResult.insertId;
        // 4Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• purchase_detail + ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡∏°
        for (const item of cartItems) {
            await connection.query(`INSERT INTO purchase_detail (purchase_id, game_id, quantity)
         VALUES (?, ?, 1)`, [purchaseId, item.game_id]);
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏Å‡∏°
            await connection.query("UPDATE game SET sold_count = sold_count + 1 WHERE id = ?", [item.game_id]);
        }
        // 5Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Library
        for (const g of cartItems) {
            await connection.query("INSERT INTO user_library (user_id, game_id) VALUES (?, ?)", [userId, g.game_id]);
        }
        // 6Ô∏è‚É£ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        await connection.query("DELETE FROM cart WHERE user_id = ?", [userId]);
        // 7Ô∏è‚É£ ‡∏ï‡∏±‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Wallet
        const newBalance = balance - totalCost;
        await connection.query("UPDATE user_account SET wallet_balance = ? WHERE id = ?", [newBalance, userId]);
        // 8Ô∏è‚É£ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        if (discountData) {
            await connection.query("UPDATE Discount_code SET use_code = use_code + 1 WHERE id = ?", [discountData.id]);
            await connection.query("INSERT INTO user_used_code (user_id, code_id) VALUES (?, ?)", [userId, discountData.id]);
            const [check] = await connection.query("SELECT use_code, max_use FROM Discount_code WHERE id = ?", [discountData.id]);
            if (check[0].use_code >= check[0].max_use) {
                await connection.query("DELETE FROM Discount_code WHERE id = ?", [discountData.id]);
            }
        }
        await connection.commit();
        return res.json({ success: true, message: "‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", newBalance });
    }
    catch (err) {
        await connection.rollback();
        console.error("‚ùå Checkout Error:", err);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
    }
    finally {
        connection.release();
    }
});
//# sourceMappingURL=cart.js.map